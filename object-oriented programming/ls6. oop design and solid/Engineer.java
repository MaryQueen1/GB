//ISP
interface Working {
    void work();
}

interface Eating {
    void eat();
}

// Интерфейсы Working и Eating определяют операции work() и eat() соответственно. Это соответствует принципу ISP, так как каждый интерфейс предоставляет только одну операцию, относящуюся к конкретной функциональности. Это позволяет клиентам использовать только те интерфейсы, которые им нужны, и избегать зависимости от неиспользуемых операций.

class Engineer implements Working, Eating {
    public void work() {
        // Реализация работы инженера
        System.out.println("Иженер инженерит");
    }

    public void eat() {
        // Реализация приема пищи
        System.out.println("Инженер кушает");
    }
}

// Класс Engineer реализует интерфейсы Working и Eating. Он предоставляет реализацию методов work() и eat(), соответствующих функциональности работы и приема пищи инженера. Это соответствует принципу ISP, так как класс Engineer использует только те интерфейсы, которые ему необходимы, и не зависит от неиспользуемых операций.